# Bitcoin Price Prediction Project

![Bitcoin Price Prediction](https://img.icons8.com/color/96/000000/bitcoin--v1.png)  
*Predicting BTC prices using LSTM and Random Forest*

## Table of Contents
- [Project Overview](#project-overview)
- [Dataset](#dataset)
- [Features](#features)
- [Technical Approach](#technical-approach)
- [Results](#results)
- [Installation](#installation)
- [Usage](#usage)
- [Future Work](#future-work)
- [License](#license)

## Project Overview
This project predicts Bitcoin (BTC) closing prices using:
- **LSTM Neural Networks** for time-series forecasting
- **Random Forest Regression** for feature-based prediction

**Key Questions Answered**:
- Which technical indicators best predict BTC prices?
- How does deep learning compare to traditional ML for financial forecasting?

## Dataset
Historical daily Bitcoin prices (OHLCV format):
- **Columns**: Date, Open, High, Low, Close, Volume
- **Time Period**: [Start Date] to [End Date]
- **Rows**: [Number of observations]

Example:
| Date       | Open  | High  | Low   | Close | Volume      |
|------------|-------|-------|-------|-------|-------------|
| 2023-01-01 | 42000 | 42500 | 41800 | 42250 | 1,200,000   |

## Features
### Engineered Features
| Feature       | Description                          | Formula/Calculation           |
|---------------|--------------------------------------|-------------------------------|
| MA_50         | 50-day moving average               | `close.rolling(50).mean()`    |
| RSI           | Relative Strength Index (14-day)    | `100 - (100 / (1 + RS))`      |
| close_lag_1   | Previous day's closing price        | `close.shift(1)`              |
| Bollinger Bands | Volatility channels                | `MA_20 Â± 2*std(20)`           |

## Technical Approach
### 1. Data Pipeline
```python
# Example code snippet
scaler = MinMaxScaler()
df['scaled_close'] = scaler.fit_transform(df[['close']])

2. Models
Model	Architecture	Key Parameters
LSTM	2 LSTM layers + Dropout	hidden_size=50, epochs=20
Random Forest	100 decision trees	max_depth=10, n_estimators=100
3. Evaluation
Metrics: MSE (Mean Squared Error), MAE (Mean Absolute Error)

Validation: 80/20 train-test split

Results
Model	MSE	MAE	Training Time
LSTM	250.32	12.45	2m 10s
Random Forest	180.57	10.21	45s
Key Findings:

Random Forest outperformed LSTM on short-term predictions

RSI and lagged prices were most important features

Bollinger Bands improved volatility prediction

Installation
Clone the repository:

bash
Copy
git clone https://github.com/yourusername/bitcoin-price-prediction.git
cd bitcoin-price-prediction
Install dependencies:

bash
Copy
pip install -r requirements.txt
Requirements:

Copy
numpy>=1.21.0
pandas>=1.3.0
scikit-learn>=1.0.0
torch>=2.0.0
matplotlib>=3.5.0
Usage
Run Jupyter Notebook:

bash
Copy
jupyter notebook bitcoin_price_prediction.ipynb
For production:

python
Copy
python predict.py --days 7  # Predict next 7 days
Future Work
Add sentiment analysis from news

Implement live API data fetching

Build Streamlit dashboard

